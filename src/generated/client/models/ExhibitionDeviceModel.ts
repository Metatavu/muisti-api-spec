/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExhibitionDeviceModelCapabilities,
    ExhibitionDeviceModelCapabilitiesFromJSON,
    ExhibitionDeviceModelCapabilitiesFromJSONTyped,
    ExhibitionDeviceModelCapabilitiesToJSON,
    ExhibitionDeviceModelDimensions,
    ExhibitionDeviceModelDimensionsFromJSON,
    ExhibitionDeviceModelDimensionsFromJSONTyped,
    ExhibitionDeviceModelDimensionsToJSON,
    ExhibitionDeviceModelDisplayMetrics,
    ExhibitionDeviceModelDisplayMetricsFromJSON,
    ExhibitionDeviceModelDisplayMetricsFromJSONTyped,
    ExhibitionDeviceModelDisplayMetricsToJSON,
} from './';

/**
 * Describes device model used in exhibition
 * @export
 * @interface ExhibitionDeviceModel
 */
export interface ExhibitionDeviceModel {
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    readonly exhibitionId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    manufacturer: string;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    model: string;
    /**
     * 
     * @type {ExhibitionDeviceModelDimensions}
     * @memberof ExhibitionDeviceModel
     */
    dimensions: ExhibitionDeviceModelDimensions;
    /**
     * 
     * @type {ExhibitionDeviceModelDisplayMetrics}
     * @memberof ExhibitionDeviceModel
     */
    displayMetrics: ExhibitionDeviceModelDisplayMetrics;
    /**
     * 
     * @type {ExhibitionDeviceModelCapabilities}
     * @memberof ExhibitionDeviceModel
     */
    capabilities: ExhibitionDeviceModelCapabilities;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionDeviceModel
     */
    readonly lastModifierId?: string;
    /**
     * Created date
     * @type {Date}
     * @memberof ExhibitionDeviceModel
     */
    readonly createdAt?: Date;
    /**
     * Date modified
     * @type {Date}
     * @memberof ExhibitionDeviceModel
     */
    readonly modifiedAt?: Date;
}

export function ExhibitionDeviceModelFromJSON(json: any): ExhibitionDeviceModel {
    return ExhibitionDeviceModelFromJSONTyped(json, false);
}

export function ExhibitionDeviceModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExhibitionDeviceModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'exhibitionId': !exists(json, 'exhibitionId') ? undefined : json['exhibitionId'],
        'manufacturer': json['manufacturer'],
        'model': json['model'],
        'dimensions': ExhibitionDeviceModelDimensionsFromJSON(json['dimensions']),
        'displayMetrics': ExhibitionDeviceModelDisplayMetricsFromJSON(json['displayMetrics']),
        'capabilities': ExhibitionDeviceModelCapabilitiesFromJSON(json['capabilities']),
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function ExhibitionDeviceModelToJSON(value?: ExhibitionDeviceModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'manufacturer': value.manufacturer,
        'model': value.model,
        'dimensions': ExhibitionDeviceModelDimensionsToJSON(value.dimensions),
        'displayMetrics': ExhibitionDeviceModelDisplayMetricsToJSON(value.displayMetrics),
        'capabilities': ExhibitionDeviceModelCapabilitiesToJSON(value.capabilities),
    };
}


