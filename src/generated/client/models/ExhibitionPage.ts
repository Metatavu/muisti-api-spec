/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExhibitionPageEvent,
    ExhibitionPageEventFromJSON,
    ExhibitionPageEventFromJSONTyped,
    ExhibitionPageEventToJSON,
    ExhibitionPageEventTriggers,
    ExhibitionPageEventTriggersFromJSON,
    ExhibitionPageEventTriggersFromJSONTyped,
    ExhibitionPageEventTriggersToJSON,
    ExhibitionPageResource,
    ExhibitionPageResourceFromJSON,
    ExhibitionPageResourceFromJSONTyped,
    ExhibitionPageResourceToJSON,
} from './';

/**
 * 
 * @export
 * @interface ExhibitionPage
 */
export interface ExhibitionPage {
    /**
     * 
     * @type {string}
     * @memberof ExhibitionPage
     */
    readonly id?: string;
    /**
     * Id of exhibition this layout belongs to
     * @type {string}
     * @memberof ExhibitionPage
     */
    readonly exhibitionId?: string;
    /**
     * Human readable name for the layout
     * @type {string}
     * @memberof ExhibitionPage
     */
    name?: string;
    /**
     * 
     * @type {Array<ExhibitionPageResource>}
     * @memberof ExhibitionPage
     */
    resources?: Array<ExhibitionPageResource>;
    /**
     * 
     * @type {ExhibitionPageEventTriggers}
     * @memberof ExhibitionPage
     */
    eventTriggers?: ExhibitionPageEventTriggers;
    /**
     * 
     * @type {Array<ExhibitionPageEvent>}
     * @memberof ExhibitionPage
     */
    events?: Array<ExhibitionPageEvent>;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionPage
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {string}
     * @memberof ExhibitionPage
     */
    readonly lastModifierId?: string;
    /**
     * Created date
     * @type {Date}
     * @memberof ExhibitionPage
     */
    readonly createdAt?: Date;
    /**
     * Date modified
     * @type {Date}
     * @memberof ExhibitionPage
     */
    readonly modifiedAt?: Date;
}

export function ExhibitionPageFromJSON(json: any): ExhibitionPage {
    return ExhibitionPageFromJSONTyped(json, false);
}

export function ExhibitionPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExhibitionPage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'exhibitionId': !exists(json, 'exhibitionId') ? undefined : json['exhibitionId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'resources': !exists(json, 'resources') ? undefined : ((json['resources'] as Array<any>).map(ExhibitionPageResourceFromJSON)),
        'eventTriggers': !exists(json, 'eventTriggers') ? undefined : ExhibitionPageEventTriggersFromJSON(json['eventTriggers']),
        'events': !exists(json, 'events') ? undefined : ((json['events'] as Array<any>).map(ExhibitionPageEventFromJSON)),
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function ExhibitionPageToJSON(value?: ExhibitionPage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'resources': value.resources === undefined ? undefined : ((value.resources as Array<any>).map(ExhibitionPageResourceToJSON)),
        'eventTriggers': ExhibitionPageEventTriggersToJSON(value.eventTriggers),
        'events': value.events === undefined ? undefined : ((value.events as Array<any>).map(ExhibitionPageEventToJSON)),
    };
}


