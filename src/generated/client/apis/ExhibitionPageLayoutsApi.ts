/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExhibitionPageLayout,
    ExhibitionPageLayoutFromJSON,
    ExhibitionPageLayoutToJSON,
} from '../models';

export interface CreateExhibitionPageLayoutRequest {
    exhibitionPageLayout: ExhibitionPageLayout;
    exhibitionId: string;
}

export interface DeleteExhibitionPageLayoutRequest {
    exhibitionId: string;
    pageLayoutId: string;
}

export interface FindExhibitionPageLayoutRequest {
    exhibitionId: string;
    pageLayoutId: string;
}

export interface ListExhibitionPageLayoutsRequest {
    exhibitionId: string;
}

export interface UpdateExhibitionPageLayoutRequest {
    exhibitionPageLayout: ExhibitionPageLayout;
    exhibitionId: string;
    pageLayoutId: string;
}

/**
 * no description
 */
export class ExhibitionPageLayoutsApi extends runtime.BaseAPI {

    /**
     * Creates new exhibition page layout
     * Create a page layout
     */
    async createExhibitionPageLayoutRaw(requestParameters: CreateExhibitionPageLayoutRequest): Promise<runtime.ApiResponse<ExhibitionPageLayout>> {
        if (requestParameters.exhibitionPageLayout === null || requestParameters.exhibitionPageLayout === undefined) {
            throw new runtime.RequiredError('exhibitionPageLayout','Required parameter requestParameters.exhibitionPageLayout was null or undefined when calling createExhibitionPageLayout.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling createExhibitionPageLayout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/pageLayouts`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionPageLayoutToJSON(requestParameters.exhibitionPageLayout),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionPageLayoutFromJSON(jsonValue));
    }

    /**
     * Creates new exhibition page layout
     * Create a page layout
     */
    async createExhibitionPageLayout(requestParameters: CreateExhibitionPageLayoutRequest): Promise<ExhibitionPageLayout> {
        const response = await this.createExhibitionPageLayoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delets exhibition page layout.
     * Deletes page layout.
     */
    async deleteExhibitionPageLayoutRaw(requestParameters: DeleteExhibitionPageLayoutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling deleteExhibitionPageLayout.');
        }

        if (requestParameters.pageLayoutId === null || requestParameters.pageLayoutId === undefined) {
            throw new runtime.RequiredError('pageLayoutId','Required parameter requestParameters.pageLayoutId was null or undefined when calling deleteExhibitionPageLayout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/pageLayouts/{pageLayoutId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"pageLayoutId"}}`, encodeURIComponent(String(requestParameters.pageLayoutId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delets exhibition page layout.
     * Deletes page layout.
     */
    async deleteExhibitionPageLayout(requestParameters: DeleteExhibitionPageLayoutRequest): Promise<void> {
        await this.deleteExhibitionPageLayoutRaw(requestParameters);
    }

    /**
     * Finds a page layout by id
     * Find a page layout
     */
    async findExhibitionPageLayoutRaw(requestParameters: FindExhibitionPageLayoutRequest): Promise<runtime.ApiResponse<ExhibitionPageLayout>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling findExhibitionPageLayout.');
        }

        if (requestParameters.pageLayoutId === null || requestParameters.pageLayoutId === undefined) {
            throw new runtime.RequiredError('pageLayoutId','Required parameter requestParameters.pageLayoutId was null or undefined when calling findExhibitionPageLayout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/pageLayouts/{pageLayoutId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"pageLayoutId"}}`, encodeURIComponent(String(requestParameters.pageLayoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionPageLayoutFromJSON(jsonValue));
    }

    /**
     * Finds a page layout by id
     * Find a page layout
     */
    async findExhibitionPageLayout(requestParameters: FindExhibitionPageLayoutRequest): Promise<ExhibitionPageLayout> {
        const response = await this.findExhibitionPageLayoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * List exhibition page layouts
     * List page layouts
     */
    async listExhibitionPageLayoutsRaw(requestParameters: ListExhibitionPageLayoutsRequest): Promise<runtime.ApiResponse<Array<ExhibitionPageLayout>>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling listExhibitionPageLayouts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/pageLayouts`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExhibitionPageLayoutFromJSON));
    }

    /**
     * List exhibition page layouts
     * List page layouts
     */
    async listExhibitionPageLayouts(requestParameters: ListExhibitionPageLayoutsRequest): Promise<Array<ExhibitionPageLayout>> {
        const response = await this.listExhibitionPageLayoutsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates page layout.
     * Updates page layout.
     */
    async updateExhibitionPageLayoutRaw(requestParameters: UpdateExhibitionPageLayoutRequest): Promise<runtime.ApiResponse<ExhibitionPageLayout>> {
        if (requestParameters.exhibitionPageLayout === null || requestParameters.exhibitionPageLayout === undefined) {
            throw new runtime.RequiredError('exhibitionPageLayout','Required parameter requestParameters.exhibitionPageLayout was null or undefined when calling updateExhibitionPageLayout.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling updateExhibitionPageLayout.');
        }

        if (requestParameters.pageLayoutId === null || requestParameters.pageLayoutId === undefined) {
            throw new runtime.RequiredError('pageLayoutId','Required parameter requestParameters.pageLayoutId was null or undefined when calling updateExhibitionPageLayout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/pageLayouts/{pageLayoutId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"pageLayoutId"}}`, encodeURIComponent(String(requestParameters.pageLayoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionPageLayoutToJSON(requestParameters.exhibitionPageLayout),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionPageLayoutFromJSON(jsonValue));
    }

    /**
     * Updates page layout.
     * Updates page layout.
     */
    async updateExhibitionPageLayout(requestParameters: UpdateExhibitionPageLayoutRequest): Promise<ExhibitionPageLayout> {
        const response = await this.updateExhibitionPageLayoutRaw(requestParameters);
        return await response.value();
    }

}
