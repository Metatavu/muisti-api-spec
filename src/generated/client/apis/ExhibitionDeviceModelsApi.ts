/* tslint:disable */
/* eslint-disable */
/**
 * Muisti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExhibitionDeviceModel,
    ExhibitionDeviceModelFromJSON,
    ExhibitionDeviceModelToJSON,
} from '../models';

export interface CreateExhibitionDeviceModelRequest {
    exhibitionDeviceModel: ExhibitionDeviceModel;
    exhibitionId: string;
}

export interface DeleteExhibitionDeviceModelRequest {
    exhibitionId: string;
    deviceModelId: string;
}

export interface FindExhibitionDeviceModelRequest {
    exhibitionId: string;
    deviceModelId: string;
}

export interface ListExhibitionDeviceModelsRequest {
    exhibitionId: string;
}

export interface UpdateExhibitionDeviceModelRequest {
    exhibitionDeviceModel: ExhibitionDeviceModel;
    exhibitionId: string;
    deviceModelId: string;
}

/**
 * no description
 */
export class ExhibitionDeviceModelsApi extends runtime.BaseAPI {

    /**
     * Creates new exhibition device model
     * Create a device model
     */
    async createExhibitionDeviceModelRaw(requestParameters: CreateExhibitionDeviceModelRequest): Promise<runtime.ApiResponse<ExhibitionDeviceModel>> {
        if (requestParameters.exhibitionDeviceModel === null || requestParameters.exhibitionDeviceModel === undefined) {
            throw new runtime.RequiredError('exhibitionDeviceModel','Required parameter requestParameters.exhibitionDeviceModel was null or undefined when calling createExhibitionDeviceModel.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling createExhibitionDeviceModel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceModels`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionDeviceModelToJSON(requestParameters.exhibitionDeviceModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceModelFromJSON(jsonValue));
    }

    /**
     * Creates new exhibition device model
     * Create a device model
     */
    async createExhibitionDeviceModel(requestParameters: CreateExhibitionDeviceModelRequest): Promise<ExhibitionDeviceModel> {
        const response = await this.createExhibitionDeviceModelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delets exhibition device model.
     * Deletes device model.
     */
    async deleteExhibitionDeviceModelRaw(requestParameters: DeleteExhibitionDeviceModelRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling deleteExhibitionDeviceModel.');
        }

        if (requestParameters.deviceModelId === null || requestParameters.deviceModelId === undefined) {
            throw new runtime.RequiredError('deviceModelId','Required parameter requestParameters.deviceModelId was null or undefined when calling deleteExhibitionDeviceModel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceModels/{deviceModelId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceModelId"}}`, encodeURIComponent(String(requestParameters.deviceModelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delets exhibition device model.
     * Deletes device model.
     */
    async deleteExhibitionDeviceModel(requestParameters: DeleteExhibitionDeviceModelRequest): Promise<void> {
        await this.deleteExhibitionDeviceModelRaw(requestParameters);
    }

    /**
     * Finds a device model by id
     * Find a device model
     */
    async findExhibitionDeviceModelRaw(requestParameters: FindExhibitionDeviceModelRequest): Promise<runtime.ApiResponse<ExhibitionDeviceModel>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling findExhibitionDeviceModel.');
        }

        if (requestParameters.deviceModelId === null || requestParameters.deviceModelId === undefined) {
            throw new runtime.RequiredError('deviceModelId','Required parameter requestParameters.deviceModelId was null or undefined when calling findExhibitionDeviceModel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceModels/{deviceModelId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceModelId"}}`, encodeURIComponent(String(requestParameters.deviceModelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceModelFromJSON(jsonValue));
    }

    /**
     * Finds a device model by id
     * Find a device model
     */
    async findExhibitionDeviceModel(requestParameters: FindExhibitionDeviceModelRequest): Promise<ExhibitionDeviceModel> {
        const response = await this.findExhibitionDeviceModelRaw(requestParameters);
        return await response.value();
    }

    /**
     * List exhibition device models
     * List device models
     */
    async listExhibitionDeviceModelsRaw(requestParameters: ListExhibitionDeviceModelsRequest): Promise<runtime.ApiResponse<Array<ExhibitionDeviceModel>>> {
        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling listExhibitionDeviceModels.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceModels`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExhibitionDeviceModelFromJSON));
    }

    /**
     * List exhibition device models
     * List device models
     */
    async listExhibitionDeviceModels(requestParameters: ListExhibitionDeviceModelsRequest): Promise<Array<ExhibitionDeviceModel>> {
        const response = await this.listExhibitionDeviceModelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates device model.
     * Updates device model.
     */
    async updateExhibitionDeviceModelRaw(requestParameters: UpdateExhibitionDeviceModelRequest): Promise<runtime.ApiResponse<ExhibitionDeviceModel>> {
        if (requestParameters.exhibitionDeviceModel === null || requestParameters.exhibitionDeviceModel === undefined) {
            throw new runtime.RequiredError('exhibitionDeviceModel','Required parameter requestParameters.exhibitionDeviceModel was null or undefined when calling updateExhibitionDeviceModel.');
        }

        if (requestParameters.exhibitionId === null || requestParameters.exhibitionId === undefined) {
            throw new runtime.RequiredError('exhibitionId','Required parameter requestParameters.exhibitionId was null or undefined when calling updateExhibitionDeviceModel.');
        }

        if (requestParameters.deviceModelId === null || requestParameters.deviceModelId === undefined) {
            throw new runtime.RequiredError('deviceModelId','Required parameter requestParameters.deviceModelId was null or undefined when calling updateExhibitionDeviceModel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/exhibitions/{exhibitionId}/deviceModels/{deviceModelId}`.replace(`{${"exhibitionId"}}`, encodeURIComponent(String(requestParameters.exhibitionId))).replace(`{${"deviceModelId"}}`, encodeURIComponent(String(requestParameters.deviceModelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExhibitionDeviceModelToJSON(requestParameters.exhibitionDeviceModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExhibitionDeviceModelFromJSON(jsonValue));
    }

    /**
     * Updates device model.
     * Updates device model.
     */
    async updateExhibitionDeviceModel(requestParameters: UpdateExhibitionDeviceModelRequest): Promise<ExhibitionDeviceModel> {
        const response = await this.updateExhibitionDeviceModelRaw(requestParameters);
        return await response.value();
    }

}
